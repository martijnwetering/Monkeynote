// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RocketMonkey.Monkeynote.Notes.Infrastructure;

namespace RocketMonkey.Monkeynote.Notes.Api.Infrastructure.Migrations
{
    [DbContext(typeof(NotesContext))]
    [Migration("20181005190947_Added_IsDefaultNotebook_Column_To_Notebook")]
    partial class Added_IsDefaultNotebook_Column_To_Notebook
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("Relational:Sequence:.notebookseq", "'notebookseq', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.noteseq", "'noteseq', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.tagseq", "'tagseq', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RocketMonkey.Monkeynote.Notes.Domain.AggregatesModel.NotebookAggregate.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "noteseq")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int?>("NotebookId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("NotebookId");

                    b.ToTable("notes");
                });

            modelBuilder.Entity("RocketMonkey.Monkeynote.Notes.Domain.AggregatesModel.NotebookAggregate.Notebook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "notebookseq")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<bool>("IsDefaultNotebook");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("notebooks");
                });

            modelBuilder.Entity("RocketMonkey.Monkeynote.Notes.Domain.AggregatesModel.TagAggregate.NoteTag", b =>
                {
                    b.Property<int>("NoteId");

                    b.Property<int>("TagId");

                    b.HasKey("NoteId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("notetags");
                });

            modelBuilder.Entity("RocketMonkey.Monkeynote.Notes.Domain.AggregatesModel.TagAggregate.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "tagseq")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("tags");
                });

            modelBuilder.Entity("RocketMonkey.Monkeynote.Notes.Domain.AggregatesModel.NotebookAggregate.Note", b =>
                {
                    b.HasOne("RocketMonkey.Monkeynote.Notes.Domain.AggregatesModel.NotebookAggregate.Notebook")
                        .WithMany("Notes")
                        .HasForeignKey("NotebookId");
                });

            modelBuilder.Entity("RocketMonkey.Monkeynote.Notes.Domain.AggregatesModel.TagAggregate.NoteTag", b =>
                {
                    b.HasOne("RocketMonkey.Monkeynote.Notes.Domain.AggregatesModel.NotebookAggregate.Note", "Note")
                        .WithMany("NoteTags")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RocketMonkey.Monkeynote.Notes.Domain.AggregatesModel.TagAggregate.Tag", "Tag")
                        .WithMany("NoteTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
